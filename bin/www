#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');

var mongoose = require("mongoose");
var  url = require("url");
mongoose.connect('mongodb://localhost:27017/main')



var debug = require('debug')('inout2:server');
var http = require('http');
var io = require("socket.io");
var down = require("../download");
var socketio = require("../socket");
var Video = require("../model/videos");
var down2 = require("../download2");


// down.download("http://nodejs.org/dist/node-v0.2.6.tar.gz")

/**
 * Get port from environment and store in Express.
 */



var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = io(server);

console.log("http://localhost:8080")
var socket_o = socketio.sock("http://localhost:8080");


socket_o.s.on("available", function(data){



  var download_url = data.url;

  var filename = url.parse(download_url).pathname.split("/").pop();
  var extention = filename.split(".").pop()
  console.log(filename)
  down2(data.url,"./public/"+data.name+"."+extention,function(name){

    var new_video = new Video({name : name , url: data.url});

    new_video.save(function(err){
        if(err) throw err;
        console.log("created a new video")
    });

  });

});





/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
